@using DNF.Projects.Services
@using DNF.Projects.Models
@using DNF.Projects.Shared

@namespace DNF.Projects
@inherits ModuleBase
@inject IProjectService ProjectService
@inject ISettingService SettingService
@inject NavigationManager NavigationManager

<table class="table table-borderless">
    <tr>
        <td>
            <Label For="_url" HelpText="Enter the Github Repository Url">Github Url: </Label>
        </td>
        <td>
            <input id="_url" class="form-control" @bind="@_url" />
        </td>
    </tr>
    <tr>
        <td>
            <Label For="_title" HelpText="Enter the project title">Title: </Label>
        </td>
        <td>
            <input id="_title" class="form-control" @bind="@_title" />
        </td>
    </tr>
    <tr>
        <td>
            <Label For="_description" HelpText="Enter the project description">Description: </Label>
        </td>
        <td>
            <textarea id="description" class="form-control" @bind="@_description" rows="3"></textarea>
        </td>
    </tr>
    <tr>
        <td>
            <Label For="_category" HelpText="Enter the project category">Category: </Label>
        </td>
        <td>
            <select id="_category" class="form-select" @bind="@_category">
                @foreach (var category in _categories)
                {
                    <option value="@category.ToLower()">@category</option>
                }
            </select>
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />

@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    string _url;
    string _title;
    string _description;
    string[] _categories;
    string _category;

    private async Task Save()
    {
        try
        {
            _categories = SettingService.GetSetting(ModuleState.Settings, "Categories", "Default").Split(',');
            _category = _categories[0].ToLower();

            if (!string.IsNullOrEmpty(_url) && _url.StartsWith(Common.UrlPrefix))
            {
                Project Project = new Project();
                Project.ModuleId = ModuleState.ModuleId;
                Project.SiteId = ModuleState.SiteId;
                Project.Url = _url;
                Project.Title = Common.TruncateString(_title, 50);
                Project.Description = Common.TruncateString(_description, 500);
                Project.Category = Common.TruncateString(_category, 50);
                Project.IsActive = true;
                Project = await ProjectService.AddProjectAsync(Project);
                await logger.LogInformation("Project Added {Project}", Project);
                NavigationManager.NavigateTo(NavigateUrl());
            }
            else
            {
                AddModuleMessage("You Need To Provide A Github Url", MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding Project {Error}", ex.Message);
            AddModuleMessage("Error Adding Project", MessageType.Error);
        }
    }
}
