@using DNF.Projects.Services
@using DNF.Projects.Models
@using DNF.Projects.Shared
@using System.Globalization;

@namespace DNF.Projects
@inherits ModuleBase
@inject IProjectService ProjectService
@inject IProjectActivityService ProjectActivityService
@inject ISettingService SettingService
@inject NavigationManager NavigationManager

@if (_initialized)
{
    <div class="DNF-Projects-Index">
        <div class="row justify-content-center">
            <div class="col-sm-12 col-md-8 mb-3">
                <div class="input-group">
                    <input type="date" class="form-control" @bind="@_from" />
                    <span class="input-group-text">To</span>
                    <input type="date" class="form-control" @bind="@_to" />
                    <button type="button" class="btn btn-primary" @onclick="Display">Go</button>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-sm-12 col-md-8 mb-3">
                <div class="input-group">
                    <select id="category" class="form-control" value="@_category" @onchange="(e => CategoryChanged(e))">
                        @foreach (var category in SettingService.GetSetting(ModuleState.Settings, "Categories", "Default").Split(','))
                        {
                            <option value="@category.ToLower()">@category</option>
                        }
                    </select>
                    <span class="input-group-text"> </span>
                    <select id="metric" class="form-control" value="@_metric" @onchange="(e => MetricChanged(e))">
                        <option value="watcher">Watchers</option>
                        <option value="star">Stars</option>
                        <option value="fork">Forks</option>
                        <option value="contributor">Contributors</option>
                        <option value="commit">Commits</option>
                        <option value="issue">Issues</option>
                        <option value="pr">Pull Requests</option>
                    </select>
                </div>
            </div>
        </div>
        <br />
        @if (_Projects != null && _Projects.Count > 0)
        {
            <div id="chart" class="chart"></div>
            <br />
        }
        else
        {
            <div class="col text-center">
                @_message
            </div>
            <br />
        }

        <div class="row justify-content-center mb-3">
            <div class="col-sm-12 col-md-8">
                <div class="input-group">
                    <input id="find" class="form-control" @bind="@_find" />
                    <button type="button" class="btn btn-primary" @onclick="Display">Search</button>
                    <button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>
                </div>
            </div>
        </div>
        <br />

        <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Project" /><br />

        @if (_Projects != null && _Projects.Count > 0)
        {
            <div style="max-width: 500px; margin: auto;">
                <Pager Items="@_Projects" DisplayPages="1" Class="table table-borderless table-sm" CurrentPage="@_page.ToString()" OnPageChange="OnPageChange">
                    <Header>
                        <th style="width: 1px;">&nbsp;</th>
                        @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList))
                        {
                            <th style="width: 1px;">&nbsp;</th>
                            <th style="width: 1px;">&nbsp;</th>
                        }
                        <th>Name</th>
                        <th style="text-align:right">@FormatMetric(_metric)</th>
                    </Header>
                    <Row>
                        <td><ActionLink Action="View" IconName="@Icons.MagnifyingGlass" IconOnly="true" EditMode="false" Parameters="@($"/{context.ProjectId}/{_from.ToString("MMM-dd-yyyy")}/{_to.ToString("MMM-dd-yyyy")}")" ReturnUrl="@(NavigateUrl(PageState.Page.Path, AddUrlParameters(_from.ToString("MMM-dd-yyyy"), _to.ToString("MMM-dd-yyyy"), _category, _metric, _page, _find)))" /></td>

                        @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList))
                        {
                            <td><ActionLink Action="Edit" Parameters="@($"id=" + context.ProjectId.ToString())" /></td>
                            <td><ActionDialog Header="Delete Project" Message="@("Are You Sure You Wish To Delete This Project?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
                        }
                        <td>@((MarkupString)("<a href=\"" + context.Url + "\" target=\"_new\">" + FormatUrl(context.Url, context.Title) + "</a>"))</td>
                        <td style="text-align:right">
                            @switch (_metric)
                            {
                                case "watcher":
                                    @context.Watchers
                                    break;
                                case "star":
                                    @context.Stars
                                    break;
                                case "fork":
                                    @context.Forks
                                    break;
                                case "contributor":
                                    @context.Contributors
                                    break;
                                case "commit":
                                    @context.Commits
                                    break;
                                case "issue":
                                    @context.Issues
                                    break;
                                case "pr":
                                    @context.PullRequests
                                    break;
                            }
                        </td>
                    </Row>
                </Pager>
            </div>
            <br />
            <div class="col text-center">
                @((MarkupString)_link)
            </div>
        }

    </div>
    <br />
}

@code {
    bool _initialized = false;
    List<Project> _Projects;
    DateTime _from = DateTime.Now.AddDays(-30);
    DateTime _to = DateTime.Now;
    string _category = "";
    string _metric = "pr";
    string _find = "";
    private int _page = 1;
    string _message = "";
    string _link = "";
    bool _refresh = false;

    public override string UrlParametersTemplate => "/{from}/{to}/{category}/{metric}/{page}/{find}";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Bundle = "ChartJS", Url = "https://cdn.jsdelivr.net/npm/chart.js@2.8.0" },
        new Resource { ResourceType = ResourceType.Script, Bundle = "ChartJS", Url = ModulePath() + "Module.js" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _category = SettingService.GetSetting(ModuleState.Settings, "Categories", "Default").Split(',')[0].ToLower();
            GetParameters();
            await Display();
            _initialized = true;
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Project {Error}", ex.Message);
            AddModuleMessage("Error Loading Project", MessageType.Error);
        }
    }

    private async Task Display()
    {
        try
        {
            ShowProgressIndicator();                
            _Projects = await ProjectService.GetProjectsAsync(ModuleState.ModuleId);
            _Projects = _Projects.Where(item => item.IsActive && item.Category == _category).ToList();
            if (!string.IsNullOrEmpty(_find))
            {
                _Projects = _Projects.Where(item => item.Url.ToLower().Contains(_find.ToLower()) ||
                    item.Title.ToLower().Contains(_find.ToLower()) ||
                    item.Description.ToLower().Contains(_find.ToLower())).ToList();
                if (_Projects.Count == 0)
                {
                    _message = "There Are No Projects Matching The Criteria Specified";
                }
            }
            _link = "";
            if (_Projects != null && _Projects.Count != 0)
            {
                List<ProjectActivity> ProjectActivity = await ProjectActivityService.GetProjectActivityAsync(-1, _from.Date, _to.Date, ModuleState.ModuleId);
                if (ProjectActivity != null)
                {
                    foreach (var project in _Projects)
                    {
                        project.Watchers = 0;
                        project.Stars = 0;
                        project.Forks = 0;
                        project.Contributors = 0;
                        project.Commits = 0;
                        project.Issues = 0;
                        project.PullRequests = 0;

                        var projectactivity = ProjectActivity.Where(item => item.ProjectId == project.ProjectId);
                        if (projectactivity.Any())
                        {
                            projectactivity = projectactivity.OrderBy(item => item.Date);
                            project.Watchers = projectactivity.Last().Watchers - projectactivity.First().Watchers;
                            project.Stars = projectactivity.Last().Stars - projectactivity.First().Stars;
                            project.Forks = projectactivity.Last().Forks - projectactivity.First().Forks;
                            project.Contributors = projectactivity.Last().Contributors - projectactivity.First().Contributors;
                            project.Commits = projectactivity.Last().Commits - projectactivity.First().Commits;
                            project.Issues = projectactivity.Last().Issues - projectactivity.First().Issues;
                            project.PullRequests = projectactivity.Last().PullRequests - projectactivity.First().PullRequests;
                        }
                    }
                    switch (_metric)
                    {
                        case "watcher":
                            _Projects = _Projects.OrderByDescending(item => item.Watchers).ToList();
                            break;
                        case "star":
                            _Projects = _Projects.OrderByDescending(item => item.Stars).ToList();
                            break;
                        case "fork":
                            _Projects = _Projects.OrderByDescending(item => item.Forks).ToList();
                            break;
                        case "contributor":
                            _Projects = _Projects.OrderByDescending(item => item.Contributors).ToList();
                            break;
                        case "commit":
                            _Projects = _Projects.OrderByDescending(item => item.Commits).ToList();
                            break;
                        case "issue":
                            _Projects = _Projects.OrderByDescending(item => item.Issues).ToList();
                            break;
                        case "pr":
                            _Projects = _Projects.OrderByDescending(item => item.PullRequests).ToList();
                            break;
                    }
                }
                _message = "";
                _link = "<a href=\"" + PageState.Uri.Scheme + "://" + PageState.Alias.Name + NavigateUrl(PageState.Page.Path, AddUrlParameters(_from.ToString("MMM-dd-yyyy"), _to.ToString("MMM-dd-yyyy"), _category, _metric, _page)) + "\">Snapshot Report Link</a>";
                _refresh = true;
            }
            HideProgressIndicator();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Project Activity {Error}", ex.Message);
            AddModuleMessage("Error Loading Project Activity", MessageType.Error);
        }
    }

    private async Task CategoryChanged(ChangeEventArgs args)
    {
        _category = (string)args.Value;
        await Display();
    }

    private async Task MetricChanged(ChangeEventArgs args)
    {
        _metric = (string)args.Value;
        await Display();
    }

    private async Task Reset()
    {
        _find = "";
        await Display();
    }

    private async Task Delete(Project Project)
    {
        try
        {
            await ProjectService.DeleteProjectAsync(Project.ProjectId, ModuleState.ModuleId);
            await logger.LogInformation("Project Deleted {Project}", Project);
            _Projects = await ProjectService.GetProjectsAsync(ModuleState.SiteId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Project {Project} {Error}", Project, ex.Message);
            AddModuleMessage("Error Deleting Project", MessageType.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            if (_refresh)
            {
                List<string> labels = new List<string>();
                List<int> values = new List<int>();
                List<object> datasets = new List<object>();
                string[] colors = new string[] { "#FF0000", "#FF8000", "#FFFF00", "#00FF00", "#00FFFF", "#0080FF", "#0000FF", "#8000FF", "#FF00FF", "#CCCCCC" };

                for (int i = 0; i < (_Projects.Count < 10 ? _Projects.Count : 10); i++)
                {
                    labels.Add(FormatUrl(_Projects[i].Url, _Projects[i].Title));
                    switch (_metric)
                    {
                        case "watcher":
                            values.Add(_Projects[i].Watchers);
                            break;
                        case "star":
                            values.Add(_Projects[i].Stars);
                            break;
                        case "fork":
                            values.Add(_Projects[i].Forks);
                            break;
                        case "contributor":
                            values.Add(_Projects[i].Contributors);
                            break;
                        case "commit":
                            values.Add(_Projects[i].Commits);
                            break;
                        case "issue":
                            values.Add(_Projects[i].Issues);
                            break;
                        case "pr":
                            values.Add(_Projects[i].PullRequests);
                            break;
                    }
                }
                datasets.Add(new { label = FormatMetric(_metric), data = values.ToArray(), fill = false, backgroundColor = colors });
                object options = new { maintainAspectRatio = false, legend = new { display = true, position = "bottom", labels = new { fontColor = "white", fontSize = 16 } } };

                var interop = new Interop(JSRuntime);
                await interop.CreateChart("chart", "doughnut", labels.ToArray(), datasets.ToArray(), options);

                _refresh = false;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Rendering Chart {Error}", ex.Message);
            AddModuleMessage("Error Rendering Chart", MessageType.Error);
        }
    }

    private string FormatUrl(string url, string title)
    {
        if (string.IsNullOrEmpty(title))
        {
            url = url.Replace(Common.UrlPrefix, "");
            url = url.Substring(url.IndexOf("/") + 1);
        }
        else
        {
            url = title;
        }
        return url;
    }

    private string FormatMetric(string metric)
    {
        switch (metric)
        {
            case "watcher":
                return "Watchers";
            case "star":
                return "Stars";
            case "fork":
                return "Forks";
            case "contributor":
                return "Contributors";
            case "commit":
                return "Commits";
            case "issue":
                return "Issues";
            case "pr":
                return "Pull Requests";
        }
        return "";
    }

    private void GetParameters()
    {
        // url parameters
        if (UrlParameters.ContainsKey("from"))
        {
            _from = DateTime.Parse(UrlParameters["from"]);
        }
        if (UrlParameters.ContainsKey("to"))
        {
            _to = DateTime.Parse(UrlParameters["to"]);
        }
        if (UrlParameters.ContainsKey("category"))
        {
            _category = UrlParameters["category"];
        }
        if (UrlParameters.ContainsKey("metric"))
        {
            _metric = UrlParameters["metric"];
        }
        if (UrlParameters.ContainsKey("page") && int.TryParse(UrlParameters["page"], out int page))
        {
            _page = page;
        }
        if (UrlParameters.ContainsKey("find"))
        {
            _find = UrlParameters["find"];
        }

        // legacy versions used querystring
        if (PageState.QueryString.ContainsKey("from") && DateTime.TryParseExact(PageState.QueryString["from"], "MMM-dd-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime from))
        {
            _from = from.Date;
        }
        if (PageState.QueryString.ContainsKey("to") && DateTime.TryParseExact(PageState.QueryString["to"], "MMM-dd-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime to))
        {
            _to = to.Date;
        }
        if (PageState.QueryString.ContainsKey("category") && !string.IsNullOrEmpty(PageState.QueryString["category"]))
        {
            _category = PageState.QueryString["category"].ToLower();
        }
        if (PageState.QueryString.ContainsKey("metric") && !string.IsNullOrEmpty(PageState.QueryString["metric"]))
        {
            _metric = PageState.QueryString["metric"].ToLower();
        }
    }

    private void OnPageChange(int page)
    {
        _page = page;
    }
}