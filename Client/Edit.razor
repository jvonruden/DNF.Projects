@using Oqtane.Modules.Controls
@using DNF.Projects.Services
@using DNF.Projects.Models
@using DNF.Projects.Shared

@namespace DNF.Projects
@inherits ModuleBase
@inject IProjectService ProjectService
@inject IProjectActivityService ProjectActivityService
@inject ISettingService SettingService
@inject NavigationManager NavigationManager

@if (_initialized)
{
<TabStrip>
    <TabPanel Name="Project" Heading="Project">
        <div class="container">
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_url" HelpText="Enter the Github Repository Url">Github Url: </Label>
                <div class="col-sm-9">
                    <input id="_url" class="form-control" @bind="@_url" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_package" HelpText="Enter the Nuget Package Name">Package Name: </Label>
                <div class="col-sm-9">
                    <input id="_package" class="form-control" @bind="@_package" />
                </div>
            </div>
             <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_title" HelpText="Enter the project title">Title: </Label>
                <div class="col-sm-9">
                    <input id="_title" class="form-control" @bind="@_title" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_description" HelpText="Enter the project description">Description: </Label>
                <div class="col-sm-9">
                    <textarea id="description" class="form-control" @bind="@_description" rows="3"></textarea>
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_category" HelpText="Enter the project category">Category: </Label>
                <div class="col-sm-9">
                    <select id="_category" class="form-select" @bind="@_category">
                        @foreach (var category in _categories)
                        {
                            <option value="@category.ToLower()">@category</option>
                        }
                    </select>
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_isactive" HelpText="Specify if the project is active">Active? </Label>
                <div class="col-sm-9">
                    <select id="_isactive" class="form-select" @bind="@_isactive">
                        <option value="True">Yes</option>
                        <option value="False">No</option>
                    </select>
                </div>
            </div
        </div
        <br /><br />
        <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
    </TabPanel>
    <TabPanel Name="Activity" Heading="Activity">
        <div class="container">
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_date" HelpText="Date When Activity Metrics Were Recorded">Date: </Label>
                <div class="col-sm-9">
                    <input id="_date" class="form-control" @bind="@_date" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_watchers" HelpText="Number of Watchers">Watchers: </Label>
                <div class="col-sm-9">
                    <input id="_watchers" class="form-control" @bind="@_watchers" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_stars" HelpText="Number of Stars">Stars: </Label>
                <div class="col-sm-9">
                    <input id="_stars" class="form-control" @bind="@_stars" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_forks" HelpText="Number of Forks">Forks: </Label>
                <div class="col-sm-9">
                    <input id="_forks" class="form-control" @bind="@_forks" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_contributors" HelpText="Number of Contributors">Contributors: </Label>
                <div class="col-sm-9">
                    <input id="_contributors" class="form-control" @bind="@_contributors" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_commits" HelpText="Number of Commits">Commits: </Label>
                <div class="col-sm-9">
                    <input id="_commits" class="form-control" @bind="@_commits" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_issues" HelpText="Number of Issues (Open + Closed)">Issues: </Label>
                <div class="col-sm-9">
                    <input id="_issues" class="form-control" @bind="@_issues" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_pullrequests" HelpText="Number of Pull Requests (Open + Closed)">Pull Requests: </Label>
                <div class="col-sm-9">
                    <input id="_pullrequests" class="form-control" @bind="@_pullrequests" />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="_downloads" HelpText="Number of Package Downloads">Downloads: </Label>
                <div class="col-sm-9">
                    <input id="_downloads" class="form-control" @bind="@_downloads" />
                </div>
            </div>
        </div>
    </TabPanel>
</TabStrip>

<button type="button" class="btn btn-success" @onclick="Save">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
}

@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Title => "Edit Project";

    bool _initialized = false;
    int _id;
    string _url;
    string _package;
    string _title;
    string _description;
    string[] _categories;
    string _category;
    string _isactive;
    string _date;
    string _watchers;
    string _stars;
    string _forks;
    string _contributors;
    string _commits;
    string _issues;
    string _pullrequests;
    string _downloads;
    string _createdby;
    DateTime _createdon;
    string _modifiedby;
    DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _categories = SettingService.GetSetting(ModuleState.Settings, "Categories", "Default").Split(',');
            _category = _categories[0].ToLower();

            _id = Int32.Parse(PageState.QueryString["id"]);
            Project Project = await ProjectService.GetProjectAsync(_id, ModuleState.ModuleId);
            if (Project != null)
            {
                _url = Project.Url;
                _package = Project.Package;
                _title = Project.Title;
                _description = Project.Description;
                if (_categories.Contains(Project.Category))
                {
                    _category = Project.Category;
                }
                _isactive = Project.IsActive.ToString();
                _createdby = Project.CreatedBy;
                _createdon = Project.CreatedOn;
                _modifiedby = Project.ModifiedBy;
                _modifiedon = Project.ModifiedOn;
                _initialized = true;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Project {ProjectId} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading Project", MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            Project Project = await ProjectService.GetProjectAsync(_id, ModuleState.ModuleId);
            if (!string.IsNullOrEmpty(_url) && _url.StartsWith(Common.UrlPrefix))
            {
                Project.Url = _url;
                Project.Package = _package;
                Project.Title = Common.TruncateString(_title, 50);
                Project.Description = Common.TruncateString(_description, 500);
                Project.Category = Common.TruncateString(_category, 50);
                Project.IsActive = bool.Parse(_isactive);
                await ProjectService.UpdateProjectAsync(Project);
                await logger.LogInformation("Project Updated {Project}", Project);

                if (!string.IsNullOrEmpty(_date) && DateTime.TryParse(_date, out DateTime date))
                {
                    var activity = new ProjectActivity();
                    activity.ProjectId = Project.ProjectId;
                    activity.Date = date.Date;
                    activity.Watchers = (string.IsNullOrEmpty(_watchers) ? 0 : int.Parse(_watchers));
                    activity.Stars = (string.IsNullOrEmpty(_stars) ? 0 : int.Parse(_stars));
                    activity.Forks = (string.IsNullOrEmpty(_forks) ? 0 : int.Parse(_forks));
                    activity.Contributors = (string.IsNullOrEmpty(_contributors) ? 0 : int.Parse(_contributors));
                    activity.Commits = (string.IsNullOrEmpty(_commits) ? 0 : int.Parse(_commits));
                    activity.Issues = (string.IsNullOrEmpty(_issues) ? 0 : int.Parse(_issues));
                    activity.PullRequests = (string.IsNullOrEmpty(_pullrequests) ? 0 : int.Parse(_pullrequests));
                    activity.Downloads = (string.IsNullOrEmpty(_downloads) ? 0 : int.Parse(_downloads));
                    await ProjectActivityService.AddProjectActivityAsync(activity, ModuleState.ModuleId);
                    await logger.LogInformation("Project Activity Added {ProjectActivity}", activity);
                }

                AddModuleMessage("Project Saved", MessageType.Success);
            }
            else
            {
                AddModuleMessage("You Need To Provide A Github Url", MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Project {Error}", ex.Message);
            AddModuleMessage("Error Saving Project", MessageType.Error);
        }
    }
}
