@namespace DNF.Projects
@inherits ModuleBase
@inject ISettingService SettingService
@implements Oqtane.Interfaces.ISettingsControl

<div class="container">
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="_token" HelpText="Enter personal access token from Github">Github Token: </Label>
        <div class="col-sm-9">
            <input id="_token" type="text" class="form-control" @bind="@_token" />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="_name" HelpText="Enter name of the person to notify when there are issues accessing the Github API">Notify Name: </Label>
        <div class="col-sm-9">
            <input id="_name" type="text" class="form-control" @bind="@_name" />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="_email" HelpText="Enter email address to notify when there are issues accessing the Github API">Notify Email: </Label>
        <div class="col-sm-9">
            <input id="_email" type="text" class="form-control" @bind="@_email" />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="_categories" HelpText="Enter a comma delimited list of categories">Categories: </Label>
        <div class="col-sm-9">
            <input id="_categories" type="text" class="form-control" @bind="@_categories" />
        </div>
    </div>
</div>

@code {
    public override string Title => "Project Settings";

    string _token;
    string _name;
    string _email;
    string _categories;

    protected override void OnInitialized()
    {
        try
        {
            _token = SettingService.GetSetting(ModuleState.Settings, "GithubToken", "");
            _name = SettingService.GetSetting(ModuleState.Settings, "NotifyName", "");
            _email = SettingService.GetSetting(ModuleState.Settings, "NotifyEmail", "");
            _categories = SettingService.GetSetting(ModuleState.Settings, "Categories", "default");
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
			var settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            settings = SettingService.SetSetting(settings, "GithubToken", _token, true);
            settings = SettingService.SetSetting(settings, "NotifyName", _name, true);
            settings = SettingService.SetSetting(settings, "NotifyEmail", _email, true);
            settings = SettingService.SetSetting(settings, "Categories", _categories, false);
            await SettingService.UpdateModuleSettingsAsync(settings, ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }
}
